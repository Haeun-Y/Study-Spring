# 04 스프링 컨테이너와 스프링 빈

스프링 컨테이너는 어떤 식으로 생성될까? 

```java
//스프링 컨테이너 생성
ApplicationContext applicationContext = 
						new AnnotationConfigApplicationContext (AppConfig.class);
```

- ApplicationContext
    - 스프링 컨테이너라 한다. (객체들을 담고 있음)
    - 인터페이스
- 스프링 컨테이너는 XML 기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있다.
- 참고
    - BeanFactory가 ApplicationContext를 포함하고 있음
    - 때문에 스프링 컨테이너를 부를 때 둘을 구분해서 이야기한다
    - BeanFactory를 직접 사용하는 경우는 거의 없으므로 일반적으로 ApplicationContext를 스프링 컨테이너라 한다.

### 01 스프링 컨테이너 생성과정

1. 스프링 컨테이너 생성
2. 스프링 빈 등록
    - 빈 이름은 항상 다른 이름으로 등록*
3. 스프링 빈 의존관계 설정 - 준비

4. 스프링 빈 의존관계 설정 - 완료
    - 설정 정보를 참고해서 의존관계 주입
    - 단순히 자바 코드를 호출하는 것이 아니다! 차임점은 뒤에 싱글톤 컨테이너에서 설명
    - 실제단계는 생성과 동시에 의존관계도 형성됨 (근데 의존관계가 라이프 사이클에서 나눠져있다고 함… 뒤에서 설명예정)
    

### 02 스프링 빈 조회 - 기본

실제로 스프링 컨테이너에 스프링 빈들이 잘 등록되어있는지 확인해보자. 

```java
package core.order.beanfind;

import core.order.AppConfig;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class ApplicationContextInfoTest {

    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

    @Test
    @DisplayName("모든 빈 출력하기")
    void findAllBean() {
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();
        for (String beanDefinitionName : beanDefinitionNames) {
            Object bean = ac.getBean(beanDefinitionName);
            System.out.println("name = " + beanDefinitionName + ", object = " + bean);
        }
    }

    @Test
    @DisplayName("애플리케이션 빈 출력하기")
//우리가 만든 빈만 출력
    void findApplicationBean() {
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();
        for (String beanDefinitionName : beanDefinitionNames) {
            BeanDefinition beanDefinition = ac.getBeanDefinition(beanDefinitionName);
            //Role ROLE_APPLICATION: 직접 등록한 애플리케이션 빈
            //Role ROLE_INFRASTRUCTURE: 스프링이 내부에서 사용하는 빈
            if (beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION) {
                Object bean = ac.getBean(beanDefinitionName);
                System.out.println("name = " + beanDefinitionName + ", object = " + bean);
            }
        }
    }
}
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d4ad23dd-bf1a-472e-ab49-6cf0f1c0db9b/Untitled.png)

우리가 만든 빈만 잘 출력됨 

- 모든 빈 출력하기
    - 실행하면 스프링에 등록된 모든 빈 정보를 출력할 수 있다.
    - ac.getBeanDefinitionNames(): 스프링에 등록된 모든 빈 이름을 조회한다.
    - ac.getBean() : 빈 이름으로 빈 객체(인스턴스)를 조회한다.
- 애플리케이션 빈 출력하기
    - 스프링이 내부에서 사용하는 빈은 제외하고, 내가 등록한 빈만 출력하기 위해선
    - 스프링이 내부에서 사용하는 빈은 getRole로 구분 가능
        - ROLE_APPLICATION: 직접 등록한 애플리케이션 빈
        - ROLE_INFRASTRUCTURE: 스프링이 내부에서 사용하는 빈
- ac.getBean(빈 이름, 타입)
- ac.getBean(타입)
- 조회 대상 스프링 빈이 없으면 예외 발생!
    
    ```java
    package hello.core.beanfind;
    
    import hello.core.AppConfig;
    import hello.core.member.Member;
    import hello.core.member.MemberService;
    import hello.core.member.MemberServiceImpl;
    import org.assertj.core.api.Assertions;
    import org.junit.jupiter.api.DisplayName;
    import org.junit.jupiter.api.Test;
    import org.springframework.beans.factory.NoSuchBeanDefinitionException;
    import org.springframework.context.annotation.AnnotationConfigApplicationContext;
    
    import static org.junit.jupiter.api.Assertions.*;
    
    public class ApplicationContextBasicFindTest {
        AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
    
            @Test
            @DisplayName("빈 이름으로 조회")
            void findBeanByName(){
                MemberService memberService = ac.getBean("memberService", MemberService.class);
                Assertions.assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
            }
            //인터페이스로 조회
            @Test
            @DisplayName("이름 없이 타입으로만 조회")
            void findBeanByType(){
                MemberService memberService = ac.getBean("memberService", MemberService.class);
                Assertions.assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
            }
            //구체타입으로 조회 - 굳이 인터페이스 타입이 아니라 구현 타입으로도 찾을 수 있음
            //근데 구체적으로 적는 것은 좋지 않음
            //구체말고 추상으로 만들기
            @Test
            @DisplayName("구체타입으로 조회")
            void findBeanByType2(){
                MemberServiceImpl memberService = ac.getBean("memberService", MemberServiceImpl.class);
                Assertions.assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
            }
    
            //조회하는 객체가 존재하지 않을 경우
            @Test
            @DisplayName("빈 이름으로 조회")
            void findBeanByNameX(){
                //ac.getBean("xxxxx", MemberService.class);
    //            MemberService xxxxx = ac.getBean("xxxxx", MemberService.class);
                assertThrows(NoSuchBeanDefinitionException.class,
                        () -> ac.getBean("xxxxx", MemberService.class));
    
            }
    }
    ```
    

### 03 스프링 빈 조회 - 동일한 타입이 둘 이상

- 타입으로 조회시 같은 타입의 스프링 빈이 둘 이상이면 오류가 발생한다. 이때는 빈 이름을 지정하자.
- ac.getBeansOfType() 을 사용하면 해당 타입의 모든 빈을 조회할 수 있다.
    
    ```java
    package hello.core.beanFind;
    
    import hello.core.AppConfig;
    import hello.core.discount.DiscountPolicy;
    import hello.core.member.MemberRepository;
    import hello.core.member.MemoryMemberRepository;
    import org.junit.jupiter.api.Assertions;
    import org.junit.jupiter.api.DisplayName;
    import org.junit.jupiter.api.Test;
    import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
    import org.springframework.context.annotation.AnnotationConfigApplicationContext;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    
    import java.util.Map;
    
    import static org.assertj.core.api.Assertions.*;
    import static org.junit.jupiter.api.Assertions.*;
    
    public class ApplicationContextSameBeanFindTest {
    
        AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(SameBeanConfig.class);
    
        @Test
        @DisplayName("타입으로 조회 시 같은 타입이 둘 이상 있으면, 중복 오류가 발생한다")
        void findBeanByTypeDuplicate() {
    //        MemberRepository bean = ac.getBean(MemberRepository.class);
            assertThrows(NoUniqueBeanDefinitionException.class,
                    () -> ac.getBean(MemberRepository.class));
        }
    
        @Test
        @DisplayName("타입으로 조회시 같은 타입이 둘 이상 있으면, 빈 이름을 지정하면 된다.")
        void findBeanByName() {
            MemberRepository memberRepository = ac.getBean("memberRepository1", MemberRepository.class);
            assertThat(memberRepository).isInstanceOf(MemberRepository.class);
        }
    
        @Test
        @DisplayName("특정 타입을 모두 조회하기") //cmd+shift+enter
        void findAllBeanByType() {
            Map<String, MemberRepository> beansOfType = ac.getBeansOfType(MemberRepository.class);
            for (String key : beansOfType.keySet()) {
                System.out.println("key = " + key + " value = " + beansOfType.get(key));
            }
            System.out.println("beansOfType = " + beansOfType);
            assertThat(beansOfType.size()).isEqualTo(2);
        }
    
        // 클래스 안의 static 클래스는 이 클래스 안에서만 쓰겠다는 뜻
        @Configuration
        static class SameBeanConfig {
    
            @Bean
            public MemberRepository memberRepository1() {
                return new MemoryMemberRepository();
            }
    
            @Bean
            public MemberRepository memberRepository2() {
                return new MemoryMemberRepository();
            }
        }
    }
    ```
    
    자동으로 주입할 때 조회하는 방법이 사용됨
    

### 04 스프링 빈 조회 - 상속 관계

- 부모 타입으로 조회하면, 자식 타입은 모두 함께 조회된다.
- 그래서 모든 자바 객체의 최고 부모인 object 타입으로 조회하면, 모든 스프링 빈을 조회한다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/85d7028d-f3a1-4383-a5fd-2a418c066b38/Untitled.png)

```java
package hello.core.beanFind;

import hello.core.AppConfig;
import hello.core.discount.DiscountPolicy;
import hello.core.discount.FixDiscountPolicy;
import hello.core.discount.RateDiscountPolicy;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ApplicationContextExtendsFindTest {

    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);

    @Test
    @DisplayName("부모 타입으로 조회시 자식이 둘 이상 있으면 중복 오류가 발생한다")
    void findBeanByParentTypeDuplicate() {
        assertThrows(NoUniqueBeanDefinitionException.class,
                () -> ac.getBean(DiscountPolicy.class));
    }

    @Test
    @DisplayName("부모 타입으로 조회시 자식이 둘 이상 있으면 빈 이름을 지정하면 된다.")
    void findBeanByParentTypeBeanName() {
        DiscountPolicy rateDiscountPolicy = ac.getBean("rateDiscountPolicy", DiscountPolicy.class);
        assertThat(rateDiscountPolicy).isInstanceOf(RateDiscountPolicy.class);
    }

    @Test
    @DisplayName("특정 하위 타입으로 조회")
    void findBeanBySubType() {
        RateDiscountPolicy bean = ac.getBean(RateDiscountPolicy.class);
        assertThat(bean).isInstanceOf(RateDiscountPolicy.class);
    }

    @Test
    @DisplayName("부모 타입으로 모두 조회하기")
    void findAllBeanByParentType() {
        Map<String, DiscountPolicy> beansOfType = ac.getBeansOfType(DiscountPolicy.class);
        assertThat(beansOfType.size()).isEqualTo(2);
        for (String key : beansOfType.keySet()) {
            System.out.println("key = " + key + " value = " + beansOfType.get(key));
        }
    }

    @Test
    @DisplayName("부모 타입으로 모두 조회하기 - Object")
    void findAllBeanByObjectType() {
        Map<String, Object> beansOfType = ac.getBeansOfType(Object.class);
        for (String key : beansOfType.keySet()) {
            System.out.println("key = " + key + " value = " + beansOfType.get(key));
        }
    }

    @Configuration
    static class TestConfig {
				//자식 인스턴스
        @Bean
        public DiscountPolicy rateDiscountPolicy() {
            return new RateDiscountPolicy();
        }

        @Bean
        public DiscountPolicy fixDiscountPolicy() {
            return new FixDiscountPolicy();
        }
    }
}
```

### 05 BeanFactory와 ApplicationContext

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6f2cc0d7-a0d2-4d53-b10a-f6dcfc24ce89/Untitled.png)

**BeanFactory**

- 스프링 컨테이너의 최상위 인터페이스
- 스프링 빈을 관리하고 조회하는 역할을 담당한다.
- getBean을 제공한다
- 지금까지 우리가 사용했던 대부분의 기능은 BeanFactory가 제공하는 기능이다.

**ApplicationContext**

- BeanFactory 기능을 모두 상속받아서 제공한다.
- 빈을 관리하고 검색하는 기능을 Beanfactory가 제공해주는데, 그러면 둘의 차이는 뭘까?
- 애플리케이션을 개발할 때는 빈은 관리하고 조회하는 기능은 물론이고, 수 많은 부가기능이 필요하다.

**ApplicationContext가 제공하는 부가기능**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/44308cbe-527c-4acc-9c35-2677dc146ab4/Untitled.png)

- **메세지소스를 활용한 국제화 기능**
    - 예를 들어서 한국에서 들어오면 한국어로, 영어권에서 들어오면 영어로 출력
- **환경변수**
    - 로컬, 개발, 운영 등을 구분해서 처리
- **애플리케이션 이벤트**
    - 이벤트를 발행하고 구독하는 모델을 편리하게 지원
- **편리한 리소스 조회**
    - 파일, 클래스패스, 외부 등에서 리소스를 편리하게 조회

정리

- ApplicationContext는 BeanFactory의 기능을 상속받는다.
- ApplicaitonContext는 빈 관리 기능 + 편리한 부가 기능을 제공한다.
- BeanFactory를 직접 사용할 일은 거의 없다. 부가기능이 포함된 ApplicationContext를 사용한다.
- BeanFactory나 ApplcationContext를 스프링 컨테이너라 한다.

### 06 다양한 설정 형식 지원 - 자바 코드, XML

- 스프링 컨테이너는 다양한 형식의 설정 정보를 받아드릴 수 있게 유연하게 설계되어 있다.
    - 자바 코드, XML, Groovy 등등

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22e4fff2-daf0-4af1-a30e-0631314d7886/Untitled.png)

generic XML: 자바 코드를 사용하는 것이 아니라 xml이라는 문서를 설정 정보로 사용하는 것 (과거에는 자주사용)

```java
package hello.core.xml;

import hello.core.member.MemberService;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

public class XmlAppContext {

    @Test
    void xmlAppContext() {
        ApplicationContext ac = new GenericXmlApplicationContext("appConfig.xml");
				//조회
        MemberService memberService = ac.getBean("memberService", MemberService.class);
        Assertions.assertThat(memberService).isInstanceOf(MemberService.class);
    }
}
```

```java
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="memberService" class="hello.core.member.MemberServiceImpl">
        <constructor-arg name="memberRepository" ref="memberRepository" />
    </bean>

    <bean id="memberRepository" class="hello.core.member.MemoryMemberRepository" />

    <bean id="orderService" class="hello.core.order.OrderServiceImpl">
        <constructor-arg name="memberRepository" ref="memberRepository" />
        <constructor-arg name="discountPolicy" ref="discountPolicy" />
    </bean>

    <bean id="discountPolicy" class="hello.core.discount.RateDiscountPolicy" />

</beans>
```

- appConfig.xml 스프링 설정 정보와 자바 코드로 된 [AppConfig.java](http://AppConfig.java) 설정 정보가 거의 비슷
- 유연하게 설정정보를 해준다는 것을 보여주기 위해 xml 실습한것

### 07 스프링 빈 설정 메타 정보 - BeanDefinition

- 스프링은 어떻게 이런 다양한 설정 형식을 지원하는 것일까? 그 중심에는 'BeanDefinition'이라는 추상화가 있다.
- 쉽게 이야기해서 '역할과 구현을 개념적으로 나눈 것'이다
    - XML을 읽어서 BeanDefinition을 만들면 된다.
    - 자바 코드를 읽어서 BeanDefinition을 만들면 된다.
    - 스프링 컨테이너는 자바 코드인지, XML인지 몰라도 된다. 오직 BeanDefinition만 알면 된다.
- 'BeanDefinition'을 빈 설정 메타정보라 한다.
    - '@Bean', '<bean>'당 각각 하나씩 메타 정보가 생성된다.
- 스프링 컨테이너는 이 메타정보를 기반으로 스프링 빈을 생성한다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e6921b76-b385-4f91-b6c3-ab26c7a80d50/Untitled.png)

BeanDefinition은 인터페이스

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b0c3f7e8-ea6b-4ca4-8dbc-3cbcc2f20110/Untitled.png)

- 'AnnotationConfigApplicationContext'는 'AnnotationDefinitionReader'를 사용해서 'AppConfig.class'를 읽고 'BeanDefinition'을 생성한다.
- 'GenericXmlApplicationContext'는 'XmlBeanDefinitionReader'를 사용해서 'appConfig.xml' 설정 정보를 읽고 'BeanDefinition'을 생성한다.
- 새로운 형식의 설정 정보가 추가되면, XxxBeanDefinitionReader를 만들어서 'BeanDefinition'을 생성하면 된다.

**"BeanDefinition 정보"**

- BeanClassName : 생성할 빈의 클래스 명(자바 설정처럼 팩토리 역할의 빈을 사용하면 없음)
- factoryBeanName : 팩토리 역할의 빈을 사용할 경우 이름, 예) appConfig
- factoryMethodName : 빈을 생성할 팩토리 메서드 지정, 예) memberService
- Scope : 싱글톤(기본값)
- lazyInit : 스프링 컨테이너를 생성할 때 빈을 생성하는 것이 아니라, 실제 빈을 사용할 때까지 최대한 생성을 지연처리 하는지 여부
- InitMethodName : 빈을 생성하고, 의존관계를 적용한 뒤에 호출되는 초기화 메서드 명
- DestoryMethodName : 빈의 생명주기가 끝나서 제거하기 직전에 호출되는 메서드 명
- Constructor arguments, Properties : 의존관계 주입에서 사용한다. (자바 설정처럼 팩터리 역할의 빈을 사용하면 없음)

```java
package hello.core.beanDefinition;

import hello.core.AppConfig;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class BeanDefinitionTest {
    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

    @Test
    @DisplayName("빈 설정 메타정보 확인")
    void findApplicationBean() {
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();

        for (String beanDefinitionName : beanDefinitionNames) {
            BeanDefinition beanDefinition = ac.getBeanDefinition(beanDefinitionName);

            if(beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION) {
                System.out.println("beanDefinitionName = " + beanDefinitionName +
                        " beanDefinition = " + beanDefinition);
            }
        }

    }

}
```

**"정리"**

- BeanDefinition을 직접 생성해서 스프링 컨테이너에 등록할 수도 있다. 하지만 실무에서 BeanDefinition을 직접 정의하거나 사용할 일은 거의 없다
- BeanDefinition에 대해서는 너무 깊이있게 이해하기 보다는, 스프링이 다양한 형태의 설정 정보를 BeanDefinition으로 추상화해서 사용하는 것 정도만 이해하면 된다.
- 가끔 스프링 코드나 스프링 관련 오픈 소스의 코드를 볼 때, BeanDefinition 이라는 것이 보일 때가 있다. 이때 이러한 매커니즘을 떠올리면 된다.

결과 출력 사진 첨부하기

xmlConfig로 하는 방식

```java
package hello.core.beanDefinition;

import hello.core.AppConfig;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

public class BeanDefinitionTest {
//    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

    GenericXmlApplicationContext ac = new GenericXmlApplicationContext("appConfig.xml");

    @Test
    @DisplayName("빈 설정 메타정보 확인")
    void findApplicationBean() {
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();

        for (String beanDefinitionName : beanDefinitionNames) {
            BeanDefinition beanDefinition = ac.getBeanDefinition(beanDefinitionName);

            if(beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION) {
                System.out.println("beanDefinitionName = " + beanDefinitionName +
                        " beanDefinition = " + beanDefinition);
            }
        }

    }
}
```

### 참조

[[Spring] BeanFactory와 ApplicationContext](https://drcode-devblog.tistory.com/332?category=1014666)

[[spring] BeanFactory와 ApplicationContext (스프링 기본편 by 김영한)](https://velog.io/@rmswjdtn/spring-BeanFactory%EC%99%80-ApplicationContext-%EC%8A%A4%ED%94%84%EB%A7%81-%EA%B8%B0%EB%B3%B8%ED%8E%B8-by-%EA%B9%80%EC%98%81%ED%95%9C)
