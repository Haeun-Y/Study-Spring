# 02 스프링 핵심 원리 이해 1 - 예제 만들기

## 프로젝트 생성

스프링 부트 스타터로 스프링 프로젝트 생성

- [https://start.spring.io/](https://start.spring.io/) 접속
- 설정
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b0f7aa63-c6f4-4380-af97-f1bd6071659e/Untitled.png)
    
- dependency를 추가하지 않는이유?
    - core쪽 라이브러리만 가져와서 제일 간단하게 생성하려고
- 프로젝트 생성해서 다운받고, intelliJ로 build.gradle 열어주기
    - 프로젝트를 처음 열 때는 라이브러리를 wget으로 다운받기 때문에 시간이 좀 걸린다!
    - 다운 받은 후에는 gradle refresh를 통해서 동기화까지 해줘야 제대로 라이브러리가 적용됨
- 의존 관계 딱 두 개인 거 확인 가능
    
    ```java
    dependencies {
    	implementation 'org.springframework.boot:spring-boot-starter'
    	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
    ```
    
- 메인 파일을 실행시키면
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0a811b5f-e4d7-4fbc-ae43-5a04cfddc232/Untitled.png)
    
    - 잘실행되는걸 볼 수 있다!
    

## 비즈니스 요구사항과 설계

- 회원
    - 회원을 가입하고 조회할 수 있다.
    - 회원은 일반과 VIP 두 가지 등급이 있다.
    - 회원 데이터는 자체 DB를 구축할 수 있고, 외부 시스템과 연동할 수 있다. (미확정)
- 주문과 할인 정책
    - 회원은 상품을 주문할 수 있다.
    - 회원 등급에 따라 할인 정책을 적용할 수 있다.
    - 할인 정책은 모든 VIP는 1000원을 할인해주는 고정 금액 할인을 적용해달라. (나중에 변경 가능성 유)
    - 할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책을 아직 정하지 못했고, 오픈 직전까지 고민을 미루고 싶다. 최악의 경우 할인을 적용하지 않을 수도 있다. (미확정)

⏩ **역할과 기능으로 나눈다!**

인터페이스를 만들고 구현체를 언제든지 갈아끼울 수 있도록 설계하면 정책이 결정될 때까지 기다리지 않고 개발을 진행할 수 있다.

## 회원 도메인 설계

- 회원 도메인 요구사항
    - 회원을 가입하고 조회할 수 있다. (회원 서비스)
    - 회원은 일반과 VIP 두 가지 등급이 있다.
    - 회원 데이터는 자체 DB를 구축할 수 있고, 외부 시스템과 연동할 수 있다. (미확정)
    
    **<회원 도메인 협력 관계>**
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/05cfb16f-0c88-45d2-b03d-8613cd186194/Untitled.png)
    
    - 일단 메모리 회원 저장소를 만든다.
        - 근데 재부팅하면 다 사라질것임 (메모리니까!) - 개발용으로만 사용
        - 나중에 DB 회원 저장소로 메모리 회원 저장소를 갈아끼울 예정
    - 기획자도 볼 수 있는 것
    
    **<회원 클래스 다이어그램>**
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/db08ab1c-0863-4f6d-996d-010d317844ac/Untitled.png)
    
    - 인터페이스로 멤버 서비스를 만듦
    - 회원 저장소를 memberRepository 인터페이스로 만듦
    - 개발자가 도메인 협력 관계 그림을 바탕으로 구체화해서 만듦
    
    **<회원 객체 다이어그램>**
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a4bbc70b-a608-45a0-a2df-ded5ad675702/Untitled.png)
    
    - 서버가 뜰 때 동적으로 결정되는, 클라이언트가 실제로 사용하는 인스턴스를 표현해놓은 그림
    - 객체 간 메모리 참조가 어떻게 되는지 표현함
    - 클라이언트가 실제로 참조하는 것은 memberServiceImpl
    - 회원 서비스: memberServiceImpl
    - 개발자가 도메인 협력 관계 다이어그램을 바탕으로 구체화해서 만듦

## 회원 도메인 개발

```java
package hello.core.member;

public enum Grade {
    BASIC,
    VIP
}
```

```java
package hello.core.member;

public class Member {
    private Long id;
    private String name;
    private Grade grade;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Grade getGrade() {
        return grade;
    }

    public void setGrade(Grade grade) {
        this.grade = grade;
    }

    //alt+insert : 생성자 한번에 만들기
    public Member(Long id, String name, Grade grade) {
        this.id = id;
        this.name = name;
        this.grade = grade;
    }
}
```

```java
package hello.core.member;

public interface MemberRepository {
    void save(Member member);

    Member findById(Long memberId);
}
```

```java
package hello.core.member;

public interface MemberService {
    //회원 가입, 회원 조회
    void join(Member member);

    Member findMember(Long memberId);
}
```

```java
package hello.core.member;

public class MemberServiceImpl implements MemberService{
    private final MemberRepository memberRepository = new MemoryMemberRepository();

    @Override
    public void join(Member member) {
        memberRepository.save(member);
    }

    @Override
    public Member findMember(Long memberId) {
        return memberRepository.findById(memberId);
    }
}
```

```java
package hello.core.member;

import java.util.HashMap;
import java.util.Map;

public class MemoryMemberRepository implements MemberRepository{
    private static Map<Long, Member> store=new HashMap<>();

    @Override
    public void save(Member member) {
        store.put(member.getId(), member);
    }

    @Override
    public Member findById(Long memberId) {
        return store.get(memberId);
    }
}
```

## 회원 도메인 실행과 테스트

객체 다이어그램은 실제로는 굉장히 동적임

회원 도메인 설계의 문제점

- 이 코드의 설계상 문제점은 무엇일까요?
- 다른 저장소로 변경할 때 OCP 원칙을 잘 준수할까요?
- DIP를 잘 지키고 있을까요?
    
    ```java
    package hello.core.member;
    
    public class MemberServiceImpl implements MemberService{
    //실제 할당하는 부분인 MemoryMemberRepository가 구현체를 의존함 
        private final MemberRepository memberRepository = new MemoryMemberRepository();
    
        @Override
        public void join(Member member) {
            memberRepository.save(member);
        }
    
        @Override
        public Member findMember(Long memberId) {
            return memberRepository.findById(memberId);
        }
    }
    ```
    

## 주문과 할인 도메인 설계

- 주문과 할인 정책
    - 회원은 상품을 주문할 수 있다.
    - 회원 등급에 따라 할인 정책을 적용할 수 있다.
    - 할인 정책은 모든 VIP는 1000원을 할인해주는 고정 금액 할인을 적용해달라. (나중에 변경 가능성 유)
    - 할인 정책은 변경 가능성이 높다. 회사의 기본 할인 정책을 아직 정하지 못했고, 오픈 직전까지 고민을 미루고 싶다. 최악의 경우 할인을 적용하지 않을 수도 있다. (미확정)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b48ef1b-2477-4d33-a737-98b5d5664e81/Untitled.png)

1. `주문 생성`: 클라이언트는 주문 서비스에 주문 생성을 요청한다.
2. `회원 조회`: 할인을 위해서는 회원 등급이 필요하다. 그래서 주문 서비스는 회원 저장소에서 회원을 조회한다.
3. `할인 적용`: 주문 서비스는 회원 등급에 따른 할인 여부를 할인 정책에 위임한다.
4. `주문 결과 반환`: 주문 서비스는 할인 결과를 포함한 주문 결과를 반환한다. 
    - (실제로는 주문 데이터를 DB에 저장하지만, 이 예제에서는 주문 결과를 단순히 반환)

**주문 도메인 전체**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9d79b5e5-ca57-4a5b-b53b-197cbda2d2cd/Untitled.png)

역할과 구현까지 그려준 그림

→ 역할과 구현을 분리했기 때문에 자유롭게 구현 객체를 조립할 수 있게 설계했다. 회원 저장소는 물론이고 할인 정책도 유연하게 변경할 수 있다. 

**주문 도메인 클래스 다이어그램**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fd89335b-2e6b-42b1-baf3-5947901d0de1/Untitled.png)

**주문 도메인 객체 다이어그램1**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ba858f6a-5103-4c88-99c4-9557d912e395/Untitled.png)

동적으로 객체들의 연관관계가 이어진다. 

- 회원을 메모리에서 조회하고, 정액 할인 정책(고정 금액)을 지원해도 주문 서비스를 변경하지 않아도 된다.
- 역할들의 협력 관계를 그대로 재사용 할 수 있다.

**주문 도메인 객체 다이어그램2**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/51f4b8cb-8f29-44cb-ad9f-efc4f8ecbda6/Untitled.png)

- 회원을 메모리가 아닌 실제 DB에서 조회하고, 정률 할인 정책(주문 금액에 따라 % 할인)을 지원해도 주문 서비스를 변경하지 않아도 된다.
- 협력 관계를 그대로 재사용 할 수 있다.

## 주문과 할인 도메인 개발

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c94b1f9c-ac3d-4727-960b-9a10fb4f56a4/Untitled.png)

단위테스트를 순수한 자바 코드로만 하는것이 중요!

왜?

시간이 적게 걸리기 때문이다.
